{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/types-in-javascript/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Kim Khanh Luu"}},"markdownRemark":{"id":"2f73f9e0-8b67-557e-9380-036ef5c678c5","excerpt":"javascript meme If you search for javascript memes in google, there will be 296.000.000 results and many of them are about corner cases in this language like…","html":"<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ZDtqrBOj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/damiancipolat/js_vs_memes/blob/master/doc/js_thanks.png%3Fraw%3Dtrue\" alt=\"javascript meme\"></p>\n<p>If you search for javascript memes in google, there will be 296.000.000 results and many of them are about corner cases in this language like the meme above. Those corner cases are weird, unpredictable and should be avoided, only when we do not know how javascript works and what’s going under the hood. When we encounter such confusions, it’s easier to make meme of them and blame the language than blaming ourself for our lack of understanding of the tool, which we use everyday. I used to be that type of developer until i saw the book series <em>You don’t know js</em> of Kyle Simpson on github a few years ago. It completely changed my mind. After spending years poring over the series and watching Kyle’s courses, it turned out I didn’t know Javascript as much as i thought. On my journey to understand javascript better, i really want to note down the knowledge and the experience i gained and this series is the beginning of that adventure.</p>\n<p>In order to get a better grip of javascript, let’s take a look into its core, which according to Kyle, can be divided into 3 pillars:</p>\n<ul>\n<li>Types</li>\n<li>Scope</li>\n<li>Object and classes</li>\n</ul>\n<p>In this blog, we’ll go into the first pillar: <strong>Types</strong></p>\n<h1>Built-in types</h1>\n<p>One thing we should make clear before diving into types: <strong>Variables don’t have types, but the values held by them do.</strong> There are 7 <a href=\"https://tc39.es/ecma262/#sec-ecmascript-language-types\">built-in primitive types</a> in javascript: <code class=\"language-text\">null</code>, <code class=\"language-text\">undefined</code>, <code class=\"language-text\">boolean</code>, <code class=\"language-text\">number</code>, <code class=\"language-text\">string</code>, <code class=\"language-text\">object</code>, <code class=\"language-text\">symbol</code>. Operator <code class=\"language-text\">typeof</code> can be used to identify them</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"object\"; 😩</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"undefined\";</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"boolean\";</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"number\";</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token string\">'Khanh'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"string\";</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Khanh'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"object\";</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"symbol\";</span></code></pre></div>\n<p>the <code class=\"language-text\">typeof</code> operator will return a string representing the value’s type, surprisingly except for <code class=\"language-text\">null</code> type. <del>This bug</del> this feature stands from the very <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#typeof_null\">first implementation of javascript</a>.</p>\n<aside>\n💡 All of these types except `object` are called \"primitives\".\n</aside>\n<h2>undefined vs undeclared</h2>\n<p>It’s tempting to think <code class=\"language-text\">undefined</code> and <code class=\"language-text\">undeclared</code> are synonyms and those terms can be used interchangeably but in fact, they are 2 different concepts. An <code class=\"language-text\">undefined</code> variable is one that is already declared, is accessible in scope, but has <em>currently</em> no value. By contrast, <code class=\"language-text\">undeclared</code> is one that is not declared, not accessible in the scope. When we try to use <code class=\"language-text\">undeclared</code> variable, the <code class=\"language-text\">ReferenceError</code> will be thrown</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> undefinedVar<span class=\"token punctuation\">;</span>\n\nundefinedVar<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// undefined</span>\nundeclaredVar<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// ReferenceError: undeclaredVar is not defined</span></code></pre></div>\n<h1>Type coercion</h1>\n<p>Coercion aka ‘type conversion’ is a mechanism of converting one type to another. There are two types of coercion: “implicit” and “explicit”. Here is an example of coercion taken from <em>You don’t know js</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// implicit coercion</span>\n\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// explicit coercion</span></code></pre></div>\n<p>How does coercion work internally and what’s going under the hood? In order to know the internal procedures, we need to understand <strong>abstract operations.</strong></p>\n<h2>Abstract operations</h2>\n<p>Every time a coercion happens, it’s handled by one or more <a href=\"https://tc39.es/ecma262/#sec-abstract-operations\">abstract operation</a>. They are <strong>internal-only operations</strong> and not like a function that could somehow be called. Here we will look into 3 abstract operations: <strong>ToPrimitive, ToString</strong> and <strong>ToNumber.</strong> There are more operations to refer and use, you can check the <a href=\"https://tc39.es/ecma262/#sec-abstract-operations\">spec</a> for more information</p>\n<h3>ToPrimitive</h3>\n<p>If we have something non-primitive (array, object,…) and want to make it into primitive, <code class=\"language-text\">ToPrimitive</code> is the first abstract operation involving in. The operation takes 2 argument: input and the optional <strong>preferredType (hint),</strong> which can be either <em>string</em> or <em>number</em>. All built-in types except for <code class=\"language-text\">object</code> are primitives, so every non-primitive has 2 available methods derived from <code class=\"language-text\">Object.prototype</code>: <strong>toString()</strong> and <strong>valueOf()</strong>. If the hint is <em>string,</em> <code class=\"language-text\">toString()</code> is invoked first. If the result is primitive value, <code class=\"language-text\">valueOf</code> will come into play and vice versa if the hint is <em>number</em>.</p>\n<table>\n<thead>\n<tr>\n<th>hint: “string”</th>\n<th>hint: “number”</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>toString()</td>\n<td>valueOf()</td>\n</tr>\n<tr>\n<td>valueOf()</td>\n<td>toString()</td>\n</tr>\n</tbody>\n</table>\n<p><code class=\"language-text\">ToPrimitive</code> is inherently recursive, that means if the result of the operation is not primitive, the operation will be invoked again until the result is primitive.</p>\n<aside>\n💡 By default, the inherited method <i>valueOf</i> from <i>Object.prototype</i> returns the object itself. For example, [].valueOf() returns [] or {}.valueOf() returns {}\n</aside>\n<h3>ToString</h3>\n<blockquote>\n<p>Don’t get confused with <code class=\"language-text\">ToString</code> and <code class=\"language-text\">Object.prototype.toString()</code>, they are 2 different things. <code class=\"language-text\">ToString</code> is an abstract operation, an internal operation, meanwhile, <code class=\"language-text\">Object.prototype.toString()</code> is a function derived from <code class=\"language-text\">Object.prototype</code> and available to all objects in javascript.</p>\n</blockquote>\n<p>The coercion of non-string value to string is handled by <code class=\"language-text\">ToString</code> operation. It converts the value according to this <a href=\"https://tc39.es/ecma262/#sec-tostring\">table</a> and here are some examples:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">undefined</span>      <span class=\"token operator\">-</span><span class=\"token operator\">></span>       <span class=\"token string\">'undefined'</span>\n<span class=\"token keyword\">null</span>           <span class=\"token operator\">-</span><span class=\"token operator\">></span>            <span class=\"token string\">'null'</span>\n<span class=\"token boolean\">true</span>           <span class=\"token operator\">-</span><span class=\"token operator\">></span>            <span class=\"token string\">'true'</span>\n<span class=\"token number\">15</span>             <span class=\"token operator\">-</span><span class=\"token operator\">></span>              <span class=\"token string\">'15'</span></code></pre></div>\n<p>For non-primitive values, <code class=\"language-text\">ToPrimitive</code> will be called with hint <em>string,</em> which in turn invoke the <code class=\"language-text\">Object.prototype.toString()</code> and then <code class=\"language-text\">valueOf()</code> (if necessary). The default implementation of <code class=\"language-text\">Object.prototype.toString()</code> returns <code class=\"language-text\">[Object object]</code>. Array itself has an overridden implementation for <strong>toString()</strong>: It removes the square brackets and concatenate array element with <code class=\"language-text\">,</code>. This can lead to some <del>weird</del> interesting results.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>                           <span class=\"token operator\">-</span><span class=\"token operator\">></span>    <span class=\"token string\">\"\"</span>   🤔\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>                    <span class=\"token operator\">-</span><span class=\"token operator\">></span>    <span class=\"token string\">\"1, 2, 3\"</span>\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">]</span>            <span class=\"token operator\">-</span><span class=\"token operator\">></span>    <span class=\"token string\">\",\"</span>  😳\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span>                        <span class=\"token operator\">-</span><span class=\"token operator\">></span>    <span class=\"token string\">\",,,\"</span></code></pre></div>\n<h2>ToNumber</h2>\n<p>The operation converts a non-numeric value to a number according to this <a href=\"https://tc39.es/ecma262/#sec-tonumber\">table</a>. For non-primitive values, <code class=\"language-text\">ToPrimitive</code> will be called with hint <em>number,</em> which in turn invoke the <code class=\"language-text\">valueOf()</code> and then <code class=\"language-text\">Object.prototype.toString()</code> (if necessary). Because the default <code class=\"language-text\">valueOf()</code> returns the object itself. Let’s take an example to understand the operation better:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">]</span>    <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">0</span></code></pre></div>\n<ul>\n<li>Because <code class=\"language-text\">[\"\"]</code> is not a primitive value, the <code class=\"language-text\">ToPrimitive()</code> will be invoked with hint <em>number</em></li>\n<li>The <code class=\"language-text\">valueOf()</code> will be invoked, which returns the object itself. The result from <code class=\"language-text\">valueOf()</code> is not a primitive value so the <code class=\"language-text\">Object.prototype.toString()</code> will come into play.</li>\n<li>The overridden implementation of array’s <code class=\"language-text\">toString()</code> removes the square bracket and concatenate array’s element with <code class=\"language-text\">,</code>, so <code class=\"language-text\">[\"\"].toString()</code> returns <code class=\"language-text\">\"\"</code>.</li>\n<li>Look up the table i mentioned above, the empty string will be converted into 0.</li>\n</ul>\n<h2>Cases of coercion</h2>\n<p>With those abstraction operations as foundation, it’s time to tackle the topic of coercion. Is type coercion really an evil and a horrible part, that we should avoid? You can claim to avoid coercion because it’s corrupt but in some cases, coercion is really helpful or you may have used it without knowing about it.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token number\">29</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">My brother is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> years old</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"My brother 25 years old\"</span></code></pre></div>\n<p>How on earth can javascript concatenate the string “My brother is” to <code class=\"language-text\">age</code>, whose value is currently a number? Yeah, you’re right, it’s type coercion. Without type coercion, you need to convert the age explicitly like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token number\">29</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">My brother is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> years old</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"My brother 25 years old\"</span>\n\n<span class=\"token comment\">// OR</span>\n<span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token number\">29</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">My brother is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>age<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> years old</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"My brother 25 years old\"</span></code></pre></div>\n<p>Of course, the first version is always my preference because of its conciseness and readability.</p>\n<p>Another example of type coercion that you should have seen in many code bases as working with browsers:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">addNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">+</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Or there’s a if statement using type coercion, that every js developer should have written:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Oh, that's having a value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Assemble our knowledge</h2>\n<p>After knowing some abstract operations and how it works, now we should be able to explain some of corner cases in the above meme. Let’s go through some of it</p>\n<h3><code class=\"language-text\">[] + [] -> \"\"</code></h3>\n<p>The result of <code class=\"language-text\">ToString()</code> with empty array is <code class=\"language-text\">“”</code>, so <code class=\"language-text\">\"\"</code> concatenating with <code class=\"language-text\">\"\"</code> of course returns <code class=\"language-text\">“”</code></p>\n<h3><code class=\"language-text\">[] + {} -> \"[Object object]\"</code></h3>\n<p>It should be an easy one. <code class=\"language-text\">[]</code> is converted to <code class=\"language-text\">\"\"</code> and the default <code class=\"language-text\">Object.prototype.toString()</code> returns <code class=\"language-text\">\"[Object object]\"</code>, so the result if of course string “[Object object]”</p>\n<h3><code class=\"language-text\">{} + [] -> 0</code></h3>\n<p>Hm, that’s really a tricky one. Since curly braces at the beginning of a statement are interpreted as starting of code block, the first pair of curly brackets is interpreted as an empty code block. So this expression is equivalent to:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>                             <span class=\"token comment\">// The plus here is an unary operator, which converts [] to number</span>\n<span class=\"token function\">ToNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>                    <span class=\"token comment\">// calls toPrimitive with hint number</span>\n<span class=\"token function\">ToPrimitive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">// calls valueOf() first and then toString() if necessary</span>\n                                <span class=\"token comment\">// [].valueOf() returns [], which is not primitive, so we have to use toString()</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">0</span>\n</code></pre></div>\n<h3><code class=\"language-text\">true + true + true = 3</code></h3>\n<p>The plus here is a binary operator, so <code class=\"language-text\">true</code> will be converted into number 1, please refer to the table i mentioned in <code class=\"language-text\">ToNumber</code>. So yes, true + true + true is really 3 in javascript.</p>\n<h3><code class=\"language-text\">(! + [] + [] + ![]).length = 9</code></h3>\n<p>The first exclamation mark performs a boolean coercion, the first unary plus operator handles a numeric coercion. So the first three symbols <code class=\"language-text\">!+[]</code> will perform firstly a numeric conversion of an empty array, and then convert that result to a boolean value. The second <code class=\"language-text\">[]</code> will be converted into primitive like the way i explained in previous examples, and the last <code class=\"language-text\">[]</code> is converted to boolean with <code class=\"language-text\">[ToBoolean</code> abstract operation](<a href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-toboolean\">https://tc39.es/ecma262/multipage/abstract-operations.html#sec-toboolean</a>), which i don’t mention in this blog. So this expression is equivalent to</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token number\">0</span> <span class=\"token operator\">+</span> <span class=\"token string\">'false'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">+</span> <span class=\"token string\">'false'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token string\">'truefalse'</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>Summary</h1>\n<p>In this post, we turn our attention to the types systems and how type conversions in javascript works. The implicit type coercion in javascript is handled by <em>abstract operations</em>. Dynamic types is one of JS’s core features but on the other hand, it’s also controversial. In order to end this post, I’d like to take a quote of Kyle Simpson from his famous series <em>You don’t know JS</em></p>\n<blockquote>\n<p>Coercion gets a bad rap, but it’s actually quite useful in many cases. An important task for the responsible JS developer is to take the time to learn all the ins and outs of coercion to decide which parts will help improve their code, and which parts they really should avoid.</p>\n</blockquote>","frontmatter":{"title":"The first javascript’s pillar: Types","date":"February 27, 2022","description":"The type system and type coercion in javascript","time":"15"}},"previous":{"fields":{"slug":"/new-beginnings/"},"frontmatter":{"title":"New Beginnings"}},"next":null},"pageContext":{"id":"2f73f9e0-8b67-557e-9380-036ef5c678c5","previousPostId":"2420e794-5e7a-5210-bacc-a2587029732b","nextPostId":null}},
    "staticQueryHashes": ["1642819152"]}
{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/loose-equality-vs-strict-equality/","result":{"data":{"site":{"siteMetadata":{"title":"Kim Khanh Luu"}},"markdownRemark":{"id":"e319fff6-f446-58ad-87bc-bee470af1cfc","excerpt":"In this appendix, I present some of the problematic features of JavaScript that are easily avoided. By simply avoiding these features, you make JavaScript a‚Ä¶","html":"<blockquote>\n<p>In this appendix, I present some of the problematic features of JavaScript that are easily avoided. By simply avoiding these features, you make JavaScript a better language, and yourself a better programmer:\n<strong>== (loose equality)</strong></p>\n</blockquote>\n<p>That‚Äôs how the great Douglas Crockford in his excellent <em><a href=\"https://www.amazon.de/-/en/Douglas-Crockford/dp/0596517742\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Javascript: The Good Parts</a></em> introduced the bad parts in javascript and listed the loose equality aka <code class=\"language-text\">==</code> operator as the first bad part of this programming language. It‚Äôs a very common advice for javascript newcomers to completely abandon <code class=\"language-text\">==</code> and use his twin <code class=\"language-text\">===</code> operator instead. There‚Äôs also an eslint rule <a href=\"https://eslint.org/docs/rules/eqeqeq\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">eqeqeq</a> to force developer completely get rid of <code class=\"language-text\">==</code>. What‚Äôs really <code class=\"language-text\">==</code>, how does it work under the hood and how is it different to their twin <code class=\"language-text\">===</code>? If those questions intrigue you, this post can give you the answer.</p>\n<aside>\nüí° Before reading this post, you should have an idea about types and type coercion in javascript. You can check <a href=\"https://kkhanhluu.github.io/types-in-javascript/\" target=\"__blank\">this</a> out to read about those topics\n</aside>\n<h3>The quiz - magic number</h3>\n<p><em>To get started, this‚Äôs a warm-up challenge for you. The answer and explanation can be found at the end of this post.</em></p>\n<p>Can you define the variable <code class=\"language-text\">magicNumber</code> so that the string <code class=\"language-text\">\"magic\"</code> is printed to the console?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> magicNumber <span class=\"token operator\">=</span> <span class=\"token operator\">??</span><span class=\"token operator\">??</span><span class=\"token operator\">?</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>magicNumber <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> magicNumber <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> magicNumber <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'magic'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Strict equality</h2>\n<p>Here‚Äôs the full <a href=\"https://262.ecma-international.org/5.1/#sec-11.9.6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">definition</a> of the strict equality comparison algorithm in the spec. To sum it up, <code class=\"language-text\">===</code> <strong>disallows</strong> <strong>coercion</strong>. If two values have different types, the comparison‚Äôs result is always <code class=\"language-text\">false</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token number\">1</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">===</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<h2>Loose equality</h2>\n<p>In contrast to <code class=\"language-text\">===</code>, <code class=\"language-text\">==</code> <strong>allows coercion</strong> in the equality comparison. Take a look at the loose equality comparison algorithm described in the <a href=\"https://262.ecma-international.org/5.1/#sec-11.9.3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">specification</a>. Let me summarize how the double equal works:</p>\n<ul>\n<li>If two values have the same type, <code class=\"language-text\">==</code> behaves exactly like <code class=\"language-text\">===</code></li>\n<li>If both of them are <code class=\"language-text\">null</code> or <code class=\"language-text\">undefined</code>, it returns <code class=\"language-text\">true</code></li>\n<li>If either or both of them are <strong>not primitive</strong>, they will be converted to primitive first by <code class=\"language-text\">ToPrimitive</code></li>\n<li>If both of them are primitive, there are 2 possible scenarios:\n<ul>\n<li>If they have the same type, <code class=\"language-text\">===</code>‚Äôs algorithm is applied.</li>\n<li>If they have different types, <code class=\"language-text\">ToNumber</code> is preferred to convert them to the same type.</li>\n</ul>\n</li>\n</ul>\n<aside>\nüí° As you can see, it‚Äôs actually very <b>safe</b> to use `==` if you're 100% sure that the values you‚Äôre comparing have the same type.\n</aside>\n<p>Let‚Äôs examine an example to understand the algorithm better:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> num2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">==</span> num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'They are equal'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Output: They are equal</span></code></pre></div>\n<p>Here‚Äôs what took place:</p>\n<ul>\n<li><code class=\"language-text\">[25]</code> is not primitive so it has to be converted to primitive (Take a look at this <a href=\"https://kkhanhluu.github.io/types-in-javascript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">post</a> to understand how <code class=\"language-text\">ToPrimitive</code> works), the result of <code class=\"language-text\">ToPrimitive([25])</code> is <code class=\"language-text\">\"25\"</code></li>\n<li>Both <code class=\"language-text\">25</code> and <code class=\"language-text\">\"25\"</code> are primitive but the have different type, <code class=\"language-text\">ToNumber</code> will come into play to convert <code class=\"language-text\">\"25\"</code> to number and the result is the number <code class=\"language-text\">25</code></li>\n<li>Because <code class=\"language-text\">25</code> is of course equals to <code class=\"language-text\">25</code>, the string <code class=\"language-text\">They are equal</code> is logged to the console.</li>\n</ul>\n<h3>Double equals corner cases</h3>\n<p>Because the value can be converted during the comparison, it will lead to some <em>‚Äúweird‚Äù</em> results if we don‚Äôt have a strong grip on type coercion. Let‚Äôs see some edge cases with double equal to understand why this feature gets so much hatred from developers</p>\n<h3><code class=\"language-text\">[] == ![]</code> is true</h3>\n<p>Let‚Äôs do the comparison step by step:</p>\n<ul>\n<li>both of values are not primitive so they will be converted to primitive. <code class=\"language-text\">ToPrimitive([])</code> returns <code class=\"language-text\">\"\"</code>, so this is equivalent to <code class=\"language-text\">\"\" == !\"\"</code></li>\n<li>The exclamation mark converts <code class=\"language-text\">\"\"</code> to a boolean value, which is <code class=\"language-text\">false</code>. So this‚Äôs equivalent to <code class=\"language-text\">\"\" == false</code></li>\n<li>Both <code class=\"language-text\">\"\"</code> and <code class=\"language-text\">false</code> are primitive but have different types, <code class=\"language-text\">false</code> will be converted to number first by <code class=\"language-text\">ToNumber</code>, which is <code class=\"language-text\">0</code></li>\n<li>Then <code class=\"language-text\">\"\"</code> is also converted to number, which is <code class=\"language-text\">0</code></li>\n<li>The expression is equivalent to: <code class=\"language-text\">0 == 0</code> and returns <code class=\"language-text\">true</code></li>\n</ul>\n<hr>\n<h3>Another edge case</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> emptyArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>emptyArray<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'yes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>emptyArray <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ƒë√∫ng'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>emptyArray <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ja'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Output:</span>\n<span class=\"token comment\">// yes</span>\n<span class=\"token comment\">// ja</span></code></pre></div>\n<ol>\n<li>In the first <code class=\"language-text\">if</code> statement, we check if <code class=\"language-text\">emptyArray</code> is truthy value. According to the <a href=\"https://262.ecma-international.org/5.1/#sec-9.2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">spec</a>, <code class=\"language-text\">[]</code> is not a falsy value, so it‚Äôs truthy. That‚Äôs why the string <code class=\"language-text\">\"yes\"</code> is printed to console.</li>\n<li>With the second <code class=\"language-text\">if</code> statement, we compare <code class=\"language-text\">[]</code> with <code class=\"language-text\">true</code>. Let‚Äôs do it step by step:\n<ul>\n<li><code class=\"language-text\">[]</code> is not primitive, so it is converted to primitive, which is <code class=\"language-text\">\"\"</code>, and this is equivalent to <code class=\"language-text\">\"\" == true</code></li>\n<li>Both of them are primitive but have different types, <code class=\"language-text\">true</code> is converted to number first, which returns <code class=\"language-text\">1</code></li>\n<li>Next, the <code class=\"language-text\">\"\"</code> is converted to number by <code class=\"language-text\">ToNumber</code> and the result is 0</li>\n<li>The expression is <code class=\"language-text\">0 == 1</code> and of course the string <code class=\"language-text\">\"ƒë√∫ng\"</code> is not printed.</li>\n</ul>\n</li>\n<li>The same logic happens as in case 2.</li>\n</ol>\n<h3>Cases for loose equality</h3>\n<p>After having some foundations of strict and loose equal, the next question is should we continue ignoring <code class=\"language-text\">==</code> and sticking to <code class=\"language-text\">===</code>? The ball is on your court.</p>\n<p>Personally, the only case I use <code class=\"language-text\">==</code> is <code class=\"language-text\">obj == null</code> for checking if the object is <code class=\"language-text\">null</code> or <code class=\"language-text\">undefined</code>. If both of 2 values is <code class=\"language-text\">null</code> or <code class=\"language-text\">undefined</code>, they are equal so only one <code class=\"language-text\">==</code> comparison is enough to check both cases. In comparison to <code class=\"language-text\">===</code>, the code is prettier and much more concise .</p>\n<p><a href=\"https://levelup.gitconnected.com/kyle-simpson-ive-forgotten-more-javascript-than-most-people-ever-learn-3bddc6c13e93\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Kyle Simpson has a controversial opinion that the usage of <code class=\"language-text\">==</code> should be preferred and <code class=\"language-text\">===</code> should only be a last option</a>. Dr. Axel Rauschmayer also wrote a <a href=\"https://2ality.com/2011/12/strict-equality-exemptions.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">blog post</a> about possibles usage of <code class=\"language-text\">==</code> in javascript. Please checkout those resources, take the time and make a wise choice for yourself.</p>\n<h2>Magic number - solution</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> magicNumber <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>magicNumber <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> magicNumber <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> magicNumber <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'magic'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Output: \"magic\"</span></code></pre></div>\n<p>There‚Äôs no number that can be equals to 1, 2 and 3 at the same time but we are using <code class=\"language-text\">==</code> for the comparison, that means <strong>type coercion</strong> is allowed. Let‚Äôs see what happens when comparing <code class=\"language-text\">magicNumber == 1</code></p>\n<ul>\n<li><code class=\"language-text\">magicNumber</code> is converted to <a href=\"https://kkhanhluu.github.io/types-in-javascript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">primitive</a>. The <strong>abstract operator</strong> <code class=\"language-text\">ToPrimitive</code> is used to convert <code class=\"language-text\">magicNumber</code> to primitive. Because we are comparing <code class=\"language-text\">magicNumber</code> with a number, the hint <strong><em>‚Äúnumber‚Äù</em></strong> will be sent to <code class=\"language-text\">ToPrimitive</code>. Therefore, <code class=\"language-text\">Object.prototype.valueOf()</code> will be executed firstly.</li>\n<li>The <code class=\"language-text\">valueOf</code> of <code class=\"language-text\">magicNumber</code> performs 2 things at the same time: it returns the <code class=\"language-text\">value</code> property which is currently <code class=\"language-text\">1</code> and increment <code class=\"language-text\">value</code> by 1.</li>\n<li>Therefore, in the next comparison, <code class=\"language-text\">valueOf()</code> returns <code class=\"language-text\">2</code> and increment <code class=\"language-text\">value</code> by 1.</li>\n<li>The process repeats after and after and now we have a magic number that <strong>loosely equals</strong> to 1, 2 and 3</li>\n</ul>","frontmatter":{"title":"üìö Javascript foundation: Loose Equality vs Strict Equality ","date":"March 05, 2022","description":"Loose equality and strict equality in javascript","time":"10"}},"previous":{"fields":{"slug":"/types-in-javascript/"},"frontmatter":{"title":"üìö Javascript foundation: Types"}},"next":{"fields":{"slug":"/what-is-cloud-native/"},"frontmatter":{"title":"üå•Ô∏è What is cloud native"}}},"pageContext":{"id":"e319fff6-f446-58ad-87bc-bee470af1cfc","previousPostId":"2f73f9e0-8b67-557e-9380-036ef5c678c5","nextPostId":"5878083b-155b-5511-a4a9-82e4cabfc858"}},"staticQueryHashes":["1642819152"]}